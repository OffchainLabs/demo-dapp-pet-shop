#!/usr/bin/env python
### ----------------------------------------------------------------------------
### arb-deploy
### ----------------------------------------------------------------------------

import argparse
import os
import subprocess
import sys

PROG='Arbitrum Deploy'
__version__ = 'Alpha'

DOCKER_COMPOSE_FILENAME='arb-docker-compose.yml'
VALIDATOR_STATE_DIRNAME='validator-states/validator'

### ----------------------------------------------------------------------------
### docker-compose template
### ----------------------------------------------------------------------------

# Parameters: mnemonic, number of validators, gas per wallet, gas limit, verbose,
# absolute path to state folder, absolute path to contract
COMPOSE_HEADER=(
"""# Machine generated by `arb-deploy`. Do not version control.
version: '3'
services:
    arb-ethbridge:
        image: arb-ethbridge
        build:
#           context: https://github.com/OffchainLabs/arb-ethbridge.git#v0.1.0
            context: %s
            args:
                MNEMONIC: '%s'
                NUM_WALLETS: %d
                NUM_VALIDATORS: %d
                GAS_PER_WALLET: %d
                GAS_LIMIT: %d
                VERBOSE: '%s'
                PORT: 7545
                CANARY_PORT: 17545
        ports:
            - '7545:7545'
            - '17545:17545'

    arb-validator-coordinator:
        depends_on:
            - arb-ethbridge
        volumes:
            - %s:/home/user/state
            - %s:/home/user/contract.ao
        image: arb-validator
        build:
#           context: https://github.com/OffchainLabs/arb-validator.git#v0.1.0
            context: %s
            args:
                WAIT_FOR: 'arb-ethbridge:17545'
                ETH_URL: 'ws://arb-ethbridge:7545'
                DEBUG: %d
                ID: 0
        ports:
            - '1235:1235'
            - '1236:1236'
""")

def compose_header(cethbridge, mnemonic, num_wallets, num_validators, gas_per_wallet,
                   gas_limit, verbose, state_abspath, contract_abspath, cvalidator, d):
    return (COMPOSE_HEADER % (cethbridge, mnemonic, num_wallets, num_validators,
                              gas_per_wallet, gas_limit, verbose, state_abspath,
                              contract_abspath, cvalidator, int(d)))

# Parameters: validator id, absolute path to state folder,
# absolute path to contract, validator id
COMPOSE_VALIDATOR=(
"""
    arb-validator%d:
        depends_on:
            - arb-validator-coordinator
        volumes:
            - %s:/home/user/state
            - %s:/home/user/contract.ao
        image: arb-validator
        environment:
            WAIT_FOR: 'arb-validator-coordinator:1236'
            ETH_URL: 'ws://arb-ethbridge:7545'
            COORDINATOR_URL: 'wss://arb-validator-coordinator:1236/ws'
            ID: %d

""")

# Returns one arb-validator declaration for a docker compose file
def compose_validator(validator_id, state_abspath, contract_abspath):
    return (COMPOSE_VALIDATOR % (validator_id, state_abspath, contract_abspath,
        validator_id))

### ----------------------------------------------------------------------------
### Deploy
### ----------------------------------------------------------------------------

# Compile contracts to `contract.ao` and export to Docker and run validators
def deploy(contract_name, n_validators, mnemonic, verbose, gas_per_wallet,
           gas_limit, dev, s):
    f = 'compose'
    if dev:
        dev_mode(f)
    # dev-mode context
    context = 'https://github.com/OffchainLabs/%s.git#v0.1.0'
    if dev:
        context = './' + f + '/' + '%s'

    # Create VALIDATOR_STATE_DIRNAME s if they don't exist
    states_path = os.path.abspath(VALIDATOR_STATE_DIRNAME)
    for i in range(n_validators):
        if not os.path.isdir(VALIDATOR_STATE_DIRNAME + str(i)):
            os.makedirs(states_path + str(i))

    # Check for DOCKER_COMPOSE_FILENAME and halt if running
    compose = os.path.abspath('./' + DOCKER_COMPOSE_FILENAME)
    if os.path.isfile(compose):
        run('docker-compose -f %s down' % compose, sudo=s)

    # Check for any running docker containers
    if subprocess.check_output(('sudo ' if s else '') + 'docker ps -q',
                               shell=True).decode("utf-8") != '':
        run('docker ps', sudo=s)
        y = raw_input('Would you like to kill and remove ALL docker containers? [y/N] ')
        if str(y).lower().strip() == 'y':
            run('docker kill $(docker ps -q)', shell=True, sudo=s)
            run('docker rm $(docker ps -aq)', shell=True, sudo=s)

    # number of wallets
    n_wallets = n_validators + 100

    # Overwrite DOCKER_COMPOSE_FILENAME
    contract = os.path.abspath(contract_name)
    contents = (
        compose_header(
            context % 'arb-ethbridge',
            mnemonic,
            n_wallets,
            n_validators,
            gas_per_wallet,
            gas_limit,
            verbose,
            states_path + str(0),
            contract,
            context % 'arb-validator',
            dev,
        ) + ''.join([compose_validator(i, states_path + str(i), contract) for i in range(1, n_validators)]))
    with open(compose, 'w') as f:
        f.write(contents)

    # Build and run
    run('docker-compose -f %s build' % compose, sudo=s)
    run('docker-compose -f %s up' % compose, sudo=s)

# Check for compose folder `f` and get dependencies
def dev_mode(f):
    if not os.path.isdir(f):
        GC = 'git clone https://github.com/OffchainLabs/%s.git ./' + f + '/%s'
        run('mkdir ' + f)
        run(GC % ('arb-ethbridge', 'arb-ethbridge'))
        run(GC % ('arb-validator', 'arb-validator'))
        run(GC % ('arb-avm', 'arb-validator/arb-avm'))
        run('ln -sf arb-validator/arb-avm ' + f + '/arb-avm')
        y = str(raw_input('Link all providers locally? [Y/n] ')).lower().strip()
        if y == 'y' or y == '':
            run(GC % ('arb-web3-provider', 'arb-web3-provider'))
            run(GC % ('arb-ethers-provider', 'arb-ethers-provider'))
            run(GC % ('arb-truffle-provider', 'arb-truffle-provider'))
            symlink = 'rm -rf node_modules/%s && ln -sf ../' + f + '/%s node_modules/%s'
            link = lambda x: symlink % (x, x, x)
            run(link('arb-web3-provider'), shell=True)
            run(link('arb-ethers-provider'), shell=True)
            run(link('arb-truffle-provider'), shell=True)

# Run commands in shell
def run(command, shell=False, sudo=False):
    BOLD='\033[1m'
    END='\033[0m'
    if sudo:
        command = 'sudo ' + command
    print(BOLD + '$ %s\n' % command + END)
    if shell:
        os.system(command)
    else:
        subprocess.call(command.split())

### ----------------------------------------------------------------------------
### Command line interface
### ----------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser(
        prog=PROG,
        description='Deploy an Arbitrum contract')
    # Required
    parser.add_argument('contract',
        help='The Arbitrum bytecode contract to deploy.')
    parser.add_argument('n_validators', type=int,
        help='The number of validators to deploy.')
    # Optional
    parser.add_argument('-d', '--dev', action='store_true', dest='dev',
        help='Downloads dependencies into `compose` folder if not created yet')
    parser.add_argument('-s', '--sudo', action='store_true', dest='sudo',
        help='Run docker-compose with sudo. May be helpful for some platforms')
    parser.add_argument('-l', '--gasLimit', type=int,
        dest='gas_limit', default=6721975,
        help='The block gas limit in wei [ganache-cli parameter]')
    parser.add_argument('-e', '--defaultBalanceEther', type=int,
        dest='gas_per_wallet', default=100,
        help='Amount of ether to assign each test account [ganache-cli parameter]')
    parser.add_argument('-m', '--mnemonic', type=str, dest='mnemonic',
        default='jar deny prosper gasp flush glass core corn alarm treat leg smart',
        help='Specify the Mnemonic to use (make sure to use "quotes")')
    parser.add_argument('-v', '--verbose', dest='verbose', action='count')
    parser.add_argument('--version', dest='version', action='version',
        version='%(prog)s ' + __version__)
    args = parser.parse_args()

    # Set verbose to Ganache parameter
    verboseFlag = '-q'
    if args.verbose is not None:
        if args.verbose == 1:
            verboseFlag = ''
        elif args.verbose == 2:
            verboseFlag = '-v'
        elif args.verbose > 2:
            verboseFlag = '-v --debug'

    # Deploy
    deploy(args.contract, args.n_validators, args.mnemonic, verboseFlag,
           args.gas_per_wallet, args.gas_limit, args.dev, args.sudo)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)

